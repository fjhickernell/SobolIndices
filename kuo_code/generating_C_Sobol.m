%% Construction of C generating matrices
s = 28; % Number of matrices for which we generate the Sobol' seq generator
m = 12; % Number of digits used to generate the seq up to 2^m points
entry_file = 'new-joe-kuo-6.21201'; % joe-kuo-old.1111 new-joe-kuo-6.21201
A = txt2mat(entry_file);


%% We take the generator values to the struct C
for k = 1:size(A,1)
    C(k + 1).d = A(k,1); % Dimension
    C(k + 1).s = A(k,2); % Polynomial degree
    C(k + 1).a = A(k,3); % Polynomial coefficients assuming a = a_d-1 * 2^0 + a_d-2 * 2^1 + ... + a_1 2^d-2
    aa = find(isnan(A(k,:))==1);
    if ~isempty(aa)
        C(k + 1).m = A(k,4:aa(1) - 1); % Initial directional numbers m_i
    else
        C(k + 1).m = A(k,4:end);
    end
end

C(1).C = eye(m); C(1).d = 1; C(1).s = 0; C(1).a = []; C(1).m = 1;
C(2).C = C(1).C;
% I generate C(2).C manually
for i = 2:m
    C(2).m = [C(2).m bitxor(2*C(2).m(end),C(2).m(end))];
    aa = (dec2bin(C(2).m(i))- '0')';
    empty = i - size(aa,1);
    C(2).C(1:i,i) = [zeros(empty,1); aa];
end

% Generate C(j).C matrices for j = 3:s
for j = 3:s % For each dimension
    C(j).C = C(1).C;
    for i = 2:m % for each column of C(j).C
        if i > size(C(j).m,2)
            vec_a = dec2bin(C(j).a)- '0';
            if size(vec_a,2) < C(j).s - 1
                vec_a = [zeros(1,C(j).s-size(vec_a,2)-1), vec_a];
            end
            vec_a = [(vec_a), 1, 1].*[2.^(1:C(j).s), 1]; % Matlab mistake: [fliplr(vec_a), 1, 1].*[2.^(1:C(j).s), 1]
            vec_a = vec_a.*[C(j).m(size(C(j).m,2):-1:size(C(j).m,2)-C(j).s+1), C(j).m(size(C(j).m,2)-C(j).s+1)];
            C(j).m = [C(j).m, bitxor_toni(vec_a)];
        end
        aa = (dec2bin(C(j).m(i))- '0')';
        empty = i - size(aa,1);
        C(j).C(1:i,i) = [zeros(empty,1);aa];
    end
end

%% We save the matrices altogether in a text file
% C_text = [];
% for kk = 1:s
%     C_text = [C_text; C(kk).C];
% end
% dlmwrite('C_matrices_R.txt',C_text,'delimiter',' ');

%% Checking the points generated by Matlab and ours
% x = zeros(2^m,s);
% for n = 1:2^m-1
%     vec_n = (dec2bin(n)- '0');
%     vec_n = fliplr(vec_n)';
%     for j = 1:s
%         x(n+1,j) = 2.^-(1:m)*mod(C(j).C*[vec_n;zeros(m-size(vec_n,1),1)],2);
%     end
% end
% sob = sobolset(s);
% x_check = net(sob,2^m);
% disp(x-x_check)

%% Evaluating t-values and creating the t-values table
t_table(1).t = [];
for dim = 2:s
    t_table(dim).t = [];
    for j = 1:dim - 1
        t_table(dim).t = [t_table(dim).t, t_value(C(j).C,C(dim).C,m)];
    end
    disp(t_table(dim).t)
end

% dim1 = 14;
% dim2 = 28;
% x = zeros(2^m,2);
% for n = 1:2^m-1
%     vec_n = (dec2bin(n)- '0');
%     vec_n = fliplr(vec_n)';
%     for j = [dim1 dim2]
%         x(n+1,j) = 2.^-(1:m)*mod(C(j).C*[vec_n;zeros(m-size(vec_n,1),1)],2);
%     end
% end
% scatter(x(:,dim1),x(:,dim2))
 